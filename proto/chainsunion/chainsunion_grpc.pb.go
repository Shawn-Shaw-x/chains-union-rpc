// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/chainsunion.proto

package chainsunion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChainsUnionService_GetSupportChains_FullMethodName          = "/chainsunion.ChainsUnionService/getSupportChains"
	ChainsUnionService_ConvertAddress_FullMethodName            = "/chainsunion.ChainsUnionService/convertAddress"
	ChainsUnionService_ValidAddress_FullMethodName              = "/chainsunion.ChainsUnionService/validAddress"
	ChainsUnionService_GetBlockByNumber_FullMethodName          = "/chainsunion.ChainsUnionService/getBlockByNumber"
	ChainsUnionService_GetBlockByHash_FullMethodName            = "/chainsunion.ChainsUnionService/getBlockByHash"
	ChainsUnionService_GetBlockHeaderByHash_FullMethodName      = "/chainsunion.ChainsUnionService/getBlockHeaderByHash"
	ChainsUnionService_GetBlockHeaderByNumber_FullMethodName    = "/chainsunion.ChainsUnionService/getBlockHeaderByNumber"
	ChainsUnionService_GetBlockHeaderByRange_FullMethodName     = "/chainsunion.ChainsUnionService/getBlockHeaderByRange"
	ChainsUnionService_GetAccount_FullMethodName                = "/chainsunion.ChainsUnionService/getAccount"
	ChainsUnionService_GetFee_FullMethodName                    = "/chainsunion.ChainsUnionService/getFee"
	ChainsUnionService_SendTx_FullMethodName                    = "/chainsunion.ChainsUnionService/SendTx"
	ChainsUnionService_GetTxByAddress_FullMethodName            = "/chainsunion.ChainsUnionService/getTxByAddress"
	ChainsUnionService_GetTxByHash_FullMethodName               = "/chainsunion.ChainsUnionService/getTxByHash"
	ChainsUnionService_BuildUnSignTransaction_FullMethodName    = "/chainsunion.ChainsUnionService/buildUnSignTransaction"
	ChainsUnionService_BuildSignedTransaction_FullMethodName    = "/chainsunion.ChainsUnionService/buildSignedTransaction"
	ChainsUnionService_DecodeTransaction_FullMethodName         = "/chainsunion.ChainsUnionService/decodeTransaction"
	ChainsUnionService_VerifySignedTransaction_FullMethodName   = "/chainsunion.ChainsUnionService/verifySignedTransaction"
	ChainsUnionService_GetExtraData_FullMethodName              = "/chainsunion.ChainsUnionService/getExtraData"
	ChainsUnionService_GetNftListByAddress_FullMethodName       = "/chainsunion.ChainsUnionService/getNftListByAddress"
	ChainsUnionService_GetNftCollection_FullMethodName          = "/chainsunion.ChainsUnionService/getNftCollection"
	ChainsUnionService_GetNftDetail_FullMethodName              = "/chainsunion.ChainsUnionService/getNftDetail"
	ChainsUnionService_GetNftHolderList_FullMethodName          = "/chainsunion.ChainsUnionService/getNftHolderList"
	ChainsUnionService_GetNftTradeHistory_FullMethodName        = "/chainsunion.ChainsUnionService/getNftTradeHistory"
	ChainsUnionService_GetAddressNftTradeHistory_FullMethodName = "/chainsunion.ChainsUnionService/getAddressNftTradeHistory"
)

// ChainsUnionServiceClient is the client API for ChainsUnionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainsUnionServiceClient interface {
	// 链支持
	GetSupportChains(ctx context.Context, in *SupportChainsRequest, opts ...grpc.CallOption) (*SupportChainsResponse, error)
	// 地址转换
	ConvertAddress(ctx context.Context, in *ConvertAddressRequest, opts ...grpc.CallOption) (*ConvertAddressResponse, error)
	// 地址校验
	ValidAddress(ctx context.Context, in *ValidAddressRequest, opts ...grpc.CallOption) (*ValidAddressResponse, error)
	// 根据区块号获取区块
	GetBlockByNumber(ctx context.Context, in *BlockNumberRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// 根据 hash 获取区块
	GetBlockByHash(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// 根据 hash 获取区块头
	GetBlockHeaderByHash(ctx context.Context, in *BlockHeaderHashRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	// 根据区块号获取区块头
	GetBlockHeaderByNumber(ctx context.Context, in *BlockHeaderNumberRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	// 根据范围获取区块头
	GetBlockHeaderByRange(ctx context.Context, in *BlockByRangeRequest, opts ...grpc.CallOption) (*BlockByRangeResponse, error)
	// 获取账号信息
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// 获取手续费
	GetFee(ctx context.Context, in *FeeRequest, opts ...grpc.CallOption) (*FeeResponse, error)
	// 发送交易
	SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxResponse, error)
	// 根据地址获取交易
	GetTxByAddress(ctx context.Context, in *TxAddressRequest, opts ...grpc.CallOption) (*TxAddressResponse, error)
	// 根据交易 hash 获取交易
	GetTxByHash(ctx context.Context, in *TxHashRequest, opts ...grpc.CallOption) (*TxHashResponse, error)
	// 构建未签名交易
	BuildUnSignTransaction(ctx context.Context, in *UnSignTransactionRequest, opts ...grpc.CallOption) (*UnSignTransactionResponse, error)
	// 构建已签名交易
	BuildSignedTransaction(ctx context.Context, in *SignedTransactionRequest, opts ...grpc.CallOption) (*SignedTransactionResponse, error)
	// 交易解码，解析成可读形式
	DecodeTransaction(ctx context.Context, in *DecodeTransactionRequest, opts ...grpc.CallOption) (*DecodeTransactionResponse, error)
	// 校验已签名交易
	VerifySignedTransaction(ctx context.Context, in *VerifyTransactionRequest, opts ...grpc.CallOption) (*VerifyTransactionResponse, error)
	// 获取额外数据
	GetExtraData(ctx context.Context, in *ExtraDataRequest, opts ...grpc.CallOption) (*ExtraDataResponse, error)
	// 获取某个地址的 NFT 列表
	GetNftListByAddress(ctx context.Context, in *NftAddressRequest, opts ...grpc.CallOption) (*NftAddressResponse, error)
	// 获取 NFT 的集合
	GetNftCollection(ctx context.Context, in *NftCollectionRequest, opts ...grpc.CallOption) (*NftCollectionResponse, error)
	// 获取 NFT 的细节
	GetNftDetail(ctx context.Context, in *NftDetailRequest, opts ...grpc.CallOption) (*NftDetailResponse, error)
	// 获取 NFT 的持有者列表
	GetNftHolderList(ctx context.Context, in *NftHolderListRequest, opts ...grpc.CallOption) (*NftHolderListResponse, error)
	// 获取 NFT 的交易历史
	GetNftTradeHistory(ctx context.Context, in *NftTradeHistoryRequest, opts ...grpc.CallOption) (*NftTradeHistoryResponse, error)
	// 获取某个地址的 NFT 交易历史
	GetAddressNftTradeHistory(ctx context.Context, in *AddressNftTradeHistoryRequest, opts ...grpc.CallOption) (*AddressNftTradeHistoryResponse, error)
}

type chainsUnionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainsUnionServiceClient(cc grpc.ClientConnInterface) ChainsUnionServiceClient {
	return &chainsUnionServiceClient{cc}
}

func (c *chainsUnionServiceClient) GetSupportChains(ctx context.Context, in *SupportChainsRequest, opts ...grpc.CallOption) (*SupportChainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportChainsResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetSupportChains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) ConvertAddress(ctx context.Context, in *ConvertAddressRequest, opts ...grpc.CallOption) (*ConvertAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertAddressResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_ConvertAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) ValidAddress(ctx context.Context, in *ValidAddressRequest, opts ...grpc.CallOption) (*ValidAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidAddressResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_ValidAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetBlockByNumber(ctx context.Context, in *BlockNumberRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetBlockByNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetBlockByHash(ctx context.Context, in *BlockHashRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetBlockByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetBlockHeaderByHash(ctx context.Context, in *BlockHeaderHashRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetBlockHeaderByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetBlockHeaderByNumber(ctx context.Context, in *BlockHeaderNumberRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetBlockHeaderByNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetBlockHeaderByRange(ctx context.Context, in *BlockByRangeRequest, opts ...grpc.CallOption) (*BlockByRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockByRangeResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetBlockHeaderByRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetFee(ctx context.Context, in *FeeRequest, opts ...grpc.CallOption) (*FeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeeResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetFee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTxResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_SendTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetTxByAddress(ctx context.Context, in *TxAddressRequest, opts ...grpc.CallOption) (*TxAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxAddressResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetTxByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetTxByHash(ctx context.Context, in *TxHashRequest, opts ...grpc.CallOption) (*TxHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxHashResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetTxByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) BuildUnSignTransaction(ctx context.Context, in *UnSignTransactionRequest, opts ...grpc.CallOption) (*UnSignTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSignTransactionResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_BuildUnSignTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) BuildSignedTransaction(ctx context.Context, in *SignedTransactionRequest, opts ...grpc.CallOption) (*SignedTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedTransactionResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_BuildSignedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) DecodeTransaction(ctx context.Context, in *DecodeTransactionRequest, opts ...grpc.CallOption) (*DecodeTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecodeTransactionResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_DecodeTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) VerifySignedTransaction(ctx context.Context, in *VerifyTransactionRequest, opts ...grpc.CallOption) (*VerifyTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTransactionResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_VerifySignedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetExtraData(ctx context.Context, in *ExtraDataRequest, opts ...grpc.CallOption) (*ExtraDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtraDataResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetExtraData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetNftListByAddress(ctx context.Context, in *NftAddressRequest, opts ...grpc.CallOption) (*NftAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftAddressResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetNftListByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetNftCollection(ctx context.Context, in *NftCollectionRequest, opts ...grpc.CallOption) (*NftCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftCollectionResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetNftCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetNftDetail(ctx context.Context, in *NftDetailRequest, opts ...grpc.CallOption) (*NftDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftDetailResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetNftDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetNftHolderList(ctx context.Context, in *NftHolderListRequest, opts ...grpc.CallOption) (*NftHolderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftHolderListResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetNftHolderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetNftTradeHistory(ctx context.Context, in *NftTradeHistoryRequest, opts ...grpc.CallOption) (*NftTradeHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NftTradeHistoryResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetNftTradeHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainsUnionServiceClient) GetAddressNftTradeHistory(ctx context.Context, in *AddressNftTradeHistoryRequest, opts ...grpc.CallOption) (*AddressNftTradeHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressNftTradeHistoryResponse)
	err := c.cc.Invoke(ctx, ChainsUnionService_GetAddressNftTradeHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainsUnionServiceServer is the server API for ChainsUnionService service.
// All implementations should embed UnimplementedChainsUnionServiceServer
// for forward compatibility.
type ChainsUnionServiceServer interface {
	// 链支持
	GetSupportChains(context.Context, *SupportChainsRequest) (*SupportChainsResponse, error)
	// 地址转换
	ConvertAddress(context.Context, *ConvertAddressRequest) (*ConvertAddressResponse, error)
	// 地址校验
	ValidAddress(context.Context, *ValidAddressRequest) (*ValidAddressResponse, error)
	// 根据区块号获取区块
	GetBlockByNumber(context.Context, *BlockNumberRequest) (*BlockResponse, error)
	// 根据 hash 获取区块
	GetBlockByHash(context.Context, *BlockHashRequest) (*BlockResponse, error)
	// 根据 hash 获取区块头
	GetBlockHeaderByHash(context.Context, *BlockHeaderHashRequest) (*BlockHeaderResponse, error)
	// 根据区块号获取区块头
	GetBlockHeaderByNumber(context.Context, *BlockHeaderNumberRequest) (*BlockHeaderResponse, error)
	// 根据范围获取区块头
	GetBlockHeaderByRange(context.Context, *BlockByRangeRequest) (*BlockByRangeResponse, error)
	// 获取账号信息
	GetAccount(context.Context, *AccountRequest) (*AccountResponse, error)
	// 获取手续费
	GetFee(context.Context, *FeeRequest) (*FeeResponse, error)
	// 发送交易
	SendTx(context.Context, *SendTxRequest) (*SendTxResponse, error)
	// 根据地址获取交易
	GetTxByAddress(context.Context, *TxAddressRequest) (*TxAddressResponse, error)
	// 根据交易 hash 获取交易
	GetTxByHash(context.Context, *TxHashRequest) (*TxHashResponse, error)
	// 构建未签名交易
	BuildUnSignTransaction(context.Context, *UnSignTransactionRequest) (*UnSignTransactionResponse, error)
	// 构建已签名交易
	BuildSignedTransaction(context.Context, *SignedTransactionRequest) (*SignedTransactionResponse, error)
	// 交易解码，解析成可读形式
	DecodeTransaction(context.Context, *DecodeTransactionRequest) (*DecodeTransactionResponse, error)
	// 校验已签名交易
	VerifySignedTransaction(context.Context, *VerifyTransactionRequest) (*VerifyTransactionResponse, error)
	// 获取额外数据
	GetExtraData(context.Context, *ExtraDataRequest) (*ExtraDataResponse, error)
	// 获取某个地址的 NFT 列表
	GetNftListByAddress(context.Context, *NftAddressRequest) (*NftAddressResponse, error)
	// 获取 NFT 的集合
	GetNftCollection(context.Context, *NftCollectionRequest) (*NftCollectionResponse, error)
	// 获取 NFT 的细节
	GetNftDetail(context.Context, *NftDetailRequest) (*NftDetailResponse, error)
	// 获取 NFT 的持有者列表
	GetNftHolderList(context.Context, *NftHolderListRequest) (*NftHolderListResponse, error)
	// 获取 NFT 的交易历史
	GetNftTradeHistory(context.Context, *NftTradeHistoryRequest) (*NftTradeHistoryResponse, error)
	// 获取某个地址的 NFT 交易历史
	GetAddressNftTradeHistory(context.Context, *AddressNftTradeHistoryRequest) (*AddressNftTradeHistoryResponse, error)
}

// UnimplementedChainsUnionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChainsUnionServiceServer struct{}

func (UnimplementedChainsUnionServiceServer) GetSupportChains(context.Context, *SupportChainsRequest) (*SupportChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportChains not implemented")
}
func (UnimplementedChainsUnionServiceServer) ConvertAddress(context.Context, *ConvertAddressRequest) (*ConvertAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertAddress not implemented")
}
func (UnimplementedChainsUnionServiceServer) ValidAddress(context.Context, *ValidAddressRequest) (*ValidAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidAddress not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetBlockByNumber(context.Context, *BlockNumberRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetBlockByHash(context.Context, *BlockHashRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetBlockHeaderByHash(context.Context, *BlockHeaderHashRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderByHash not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetBlockHeaderByNumber(context.Context, *BlockHeaderNumberRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderByNumber not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetBlockHeaderByRange(context.Context, *BlockByRangeRequest) (*BlockByRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderByRange not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetAccount(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetFee(context.Context, *FeeRequest) (*FeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFee not implemented")
}
func (UnimplementedChainsUnionServiceServer) SendTx(context.Context, *SendTxRequest) (*SendTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetTxByAddress(context.Context, *TxAddressRequest) (*TxAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByAddress not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetTxByHash(context.Context, *TxHashRequest) (*TxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByHash not implemented")
}
func (UnimplementedChainsUnionServiceServer) BuildUnSignTransaction(context.Context, *UnSignTransactionRequest) (*UnSignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildUnSignTransaction not implemented")
}
func (UnimplementedChainsUnionServiceServer) BuildSignedTransaction(context.Context, *SignedTransactionRequest) (*SignedTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSignedTransaction not implemented")
}
func (UnimplementedChainsUnionServiceServer) DecodeTransaction(context.Context, *DecodeTransactionRequest) (*DecodeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeTransaction not implemented")
}
func (UnimplementedChainsUnionServiceServer) VerifySignedTransaction(context.Context, *VerifyTransactionRequest) (*VerifyTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignedTransaction not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetExtraData(context.Context, *ExtraDataRequest) (*ExtraDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtraData not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetNftListByAddress(context.Context, *NftAddressRequest) (*NftAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftListByAddress not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetNftCollection(context.Context, *NftCollectionRequest) (*NftCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftCollection not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetNftDetail(context.Context, *NftDetailRequest) (*NftDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftDetail not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetNftHolderList(context.Context, *NftHolderListRequest) (*NftHolderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftHolderList not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetNftTradeHistory(context.Context, *NftTradeHistoryRequest) (*NftTradeHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftTradeHistory not implemented")
}
func (UnimplementedChainsUnionServiceServer) GetAddressNftTradeHistory(context.Context, *AddressNftTradeHistoryRequest) (*AddressNftTradeHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressNftTradeHistory not implemented")
}
func (UnimplementedChainsUnionServiceServer) testEmbeddedByValue() {}

// UnsafeChainsUnionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainsUnionServiceServer will
// result in compilation errors.
type UnsafeChainsUnionServiceServer interface {
	mustEmbedUnimplementedChainsUnionServiceServer()
}

func RegisterChainsUnionServiceServer(s grpc.ServiceRegistrar, srv ChainsUnionServiceServer) {
	// If the following call pancis, it indicates UnimplementedChainsUnionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChainsUnionService_ServiceDesc, srv)
}

func _ChainsUnionService_GetSupportChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetSupportChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetSupportChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetSupportChains(ctx, req.(*SupportChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_ConvertAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).ConvertAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_ConvertAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).ConvertAddress(ctx, req.(*ConvertAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_ValidAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).ValidAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_ValidAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).ValidAddress(ctx, req.(*ValidAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetBlockByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetBlockByNumber(ctx, req.(*BlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetBlockByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetBlockByHash(ctx, req.(*BlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetBlockHeaderByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeaderHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetBlockHeaderByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetBlockHeaderByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetBlockHeaderByHash(ctx, req.(*BlockHeaderHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetBlockHeaderByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeaderNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetBlockHeaderByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetBlockHeaderByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetBlockHeaderByNumber(ctx, req.(*BlockHeaderNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetBlockHeaderByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetBlockHeaderByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetBlockHeaderByRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetBlockHeaderByRange(ctx, req.(*BlockByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetFee(ctx, req.(*FeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_SendTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).SendTx(ctx, req.(*SendTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetTxByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetTxByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetTxByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetTxByAddress(ctx, req.(*TxAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetTxByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetTxByHash(ctx, req.(*TxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_BuildUnSignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).BuildUnSignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_BuildUnSignTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).BuildUnSignTransaction(ctx, req.(*UnSignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_BuildSignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).BuildSignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_BuildSignedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).BuildSignedTransaction(ctx, req.(*SignedTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_DecodeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).DecodeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_DecodeTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).DecodeTransaction(ctx, req.(*DecodeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_VerifySignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).VerifySignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_VerifySignedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).VerifySignedTransaction(ctx, req.(*VerifyTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetExtraData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtraDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetExtraData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetExtraData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetExtraData(ctx, req.(*ExtraDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetNftListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetNftListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetNftListByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetNftListByAddress(ctx, req.(*NftAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetNftCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetNftCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetNftCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetNftCollection(ctx, req.(*NftCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetNftDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetNftDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetNftDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetNftDetail(ctx, req.(*NftDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetNftHolderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftHolderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetNftHolderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetNftHolderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetNftHolderList(ctx, req.(*NftHolderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetNftTradeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftTradeHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetNftTradeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetNftTradeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetNftTradeHistory(ctx, req.(*NftTradeHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainsUnionService_GetAddressNftTradeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressNftTradeHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsUnionServiceServer).GetAddressNftTradeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainsUnionService_GetAddressNftTradeHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsUnionServiceServer).GetAddressNftTradeHistory(ctx, req.(*AddressNftTradeHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainsUnionService_ServiceDesc is the grpc.ServiceDesc for ChainsUnionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainsUnionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainsunion.ChainsUnionService",
	HandlerType: (*ChainsUnionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getSupportChains",
			Handler:    _ChainsUnionService_GetSupportChains_Handler,
		},
		{
			MethodName: "convertAddress",
			Handler:    _ChainsUnionService_ConvertAddress_Handler,
		},
		{
			MethodName: "validAddress",
			Handler:    _ChainsUnionService_ValidAddress_Handler,
		},
		{
			MethodName: "getBlockByNumber",
			Handler:    _ChainsUnionService_GetBlockByNumber_Handler,
		},
		{
			MethodName: "getBlockByHash",
			Handler:    _ChainsUnionService_GetBlockByHash_Handler,
		},
		{
			MethodName: "getBlockHeaderByHash",
			Handler:    _ChainsUnionService_GetBlockHeaderByHash_Handler,
		},
		{
			MethodName: "getBlockHeaderByNumber",
			Handler:    _ChainsUnionService_GetBlockHeaderByNumber_Handler,
		},
		{
			MethodName: "getBlockHeaderByRange",
			Handler:    _ChainsUnionService_GetBlockHeaderByRange_Handler,
		},
		{
			MethodName: "getAccount",
			Handler:    _ChainsUnionService_GetAccount_Handler,
		},
		{
			MethodName: "getFee",
			Handler:    _ChainsUnionService_GetFee_Handler,
		},
		{
			MethodName: "SendTx",
			Handler:    _ChainsUnionService_SendTx_Handler,
		},
		{
			MethodName: "getTxByAddress",
			Handler:    _ChainsUnionService_GetTxByAddress_Handler,
		},
		{
			MethodName: "getTxByHash",
			Handler:    _ChainsUnionService_GetTxByHash_Handler,
		},
		{
			MethodName: "buildUnSignTransaction",
			Handler:    _ChainsUnionService_BuildUnSignTransaction_Handler,
		},
		{
			MethodName: "buildSignedTransaction",
			Handler:    _ChainsUnionService_BuildSignedTransaction_Handler,
		},
		{
			MethodName: "decodeTransaction",
			Handler:    _ChainsUnionService_DecodeTransaction_Handler,
		},
		{
			MethodName: "verifySignedTransaction",
			Handler:    _ChainsUnionService_VerifySignedTransaction_Handler,
		},
		{
			MethodName: "getExtraData",
			Handler:    _ChainsUnionService_GetExtraData_Handler,
		},
		{
			MethodName: "getNftListByAddress",
			Handler:    _ChainsUnionService_GetNftListByAddress_Handler,
		},
		{
			MethodName: "getNftCollection",
			Handler:    _ChainsUnionService_GetNftCollection_Handler,
		},
		{
			MethodName: "getNftDetail",
			Handler:    _ChainsUnionService_GetNftDetail_Handler,
		},
		{
			MethodName: "getNftHolderList",
			Handler:    _ChainsUnionService_GetNftHolderList_Handler,
		},
		{
			MethodName: "getNftTradeHistory",
			Handler:    _ChainsUnionService_GetNftTradeHistory_Handler,
		},
		{
			MethodName: "getAddressNftTradeHistory",
			Handler:    _ChainsUnionService_GetAddressNftTradeHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chainsunion.proto",
}
